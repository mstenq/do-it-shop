/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as EmployeesRouteImport } from './routes/employees'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as EmployeesIndexRouteImport } from './routes/employees.index'
import { Route as EmployeesIdRouteImport } from './routes/employees.$id'
import { Route as DashboardWaitingOnRouteImport } from './routes/dashboard.waiting-on'
import { Route as DashboardProjectsRouteImport } from './routes/dashboard.projects'
import { Route as DashboardOverviewRouteImport } from './routes/dashboard.overview'
import { Route as EmployeesIdIndexRouteImport } from './routes/employees.$id.index'
import { Route as EmployeesIdTimeOffRouteImport } from './routes/employees.$id.time-off'
import { Route as EmployeesIdScheduleRouteImport } from './routes/employees.$id.schedule'

const EmployeesRoute = EmployeesRouteImport.update({
  id: '/employees',
  path: '/employees',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const EmployeesIndexRoute = EmployeesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EmployeesRoute,
} as any)
const EmployeesIdRoute = EmployeesIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => EmployeesRoute,
} as any)
const DashboardWaitingOnRoute = DashboardWaitingOnRouteImport.update({
  id: '/waiting-on',
  path: '/waiting-on',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardProjectsRoute = DashboardProjectsRouteImport.update({
  id: '/projects',
  path: '/projects',
  getParentRoute: () => DashboardRoute,
} as any)
const DashboardOverviewRoute = DashboardOverviewRouteImport.update({
  id: '/overview',
  path: '/overview',
  getParentRoute: () => DashboardRoute,
} as any)
const EmployeesIdIndexRoute = EmployeesIdIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => EmployeesIdRoute,
} as any)
const EmployeesIdTimeOffRoute = EmployeesIdTimeOffRouteImport.update({
  id: '/time-off',
  path: '/time-off',
  getParentRoute: () => EmployeesIdRoute,
} as any)
const EmployeesIdScheduleRoute = EmployeesIdScheduleRouteImport.update({
  id: '/schedule',
  path: '/schedule',
  getParentRoute: () => EmployeesIdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/employees': typeof EmployeesRouteWithChildren
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/projects': typeof DashboardProjectsRoute
  '/dashboard/waiting-on': typeof DashboardWaitingOnRoute
  '/employees/$id': typeof EmployeesIdRouteWithChildren
  '/employees/': typeof EmployeesIndexRoute
  '/employees/$id/schedule': typeof EmployeesIdScheduleRoute
  '/employees/$id/time-off': typeof EmployeesIdTimeOffRoute
  '/employees/$id/': typeof EmployeesIdIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/projects': typeof DashboardProjectsRoute
  '/dashboard/waiting-on': typeof DashboardWaitingOnRoute
  '/employees': typeof EmployeesIndexRoute
  '/employees/$id/schedule': typeof EmployeesIdScheduleRoute
  '/employees/$id/time-off': typeof EmployeesIdTimeOffRoute
  '/employees/$id': typeof EmployeesIdIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRouteWithChildren
  '/employees': typeof EmployeesRouteWithChildren
  '/dashboard/overview': typeof DashboardOverviewRoute
  '/dashboard/projects': typeof DashboardProjectsRoute
  '/dashboard/waiting-on': typeof DashboardWaitingOnRoute
  '/employees/$id': typeof EmployeesIdRouteWithChildren
  '/employees/': typeof EmployeesIndexRoute
  '/employees/$id/schedule': typeof EmployeesIdScheduleRoute
  '/employees/$id/time-off': typeof EmployeesIdTimeOffRoute
  '/employees/$id/': typeof EmployeesIdIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/employees'
    | '/dashboard/overview'
    | '/dashboard/projects'
    | '/dashboard/waiting-on'
    | '/employees/$id'
    | '/employees/'
    | '/employees/$id/schedule'
    | '/employees/$id/time-off'
    | '/employees/$id/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/dashboard/overview'
    | '/dashboard/projects'
    | '/dashboard/waiting-on'
    | '/employees'
    | '/employees/$id/schedule'
    | '/employees/$id/time-off'
    | '/employees/$id'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/employees'
    | '/dashboard/overview'
    | '/dashboard/projects'
    | '/dashboard/waiting-on'
    | '/employees/$id'
    | '/employees/'
    | '/employees/$id/schedule'
    | '/employees/$id/time-off'
    | '/employees/$id/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRouteWithChildren
  EmployeesRoute: typeof EmployeesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/employees': {
      id: '/employees'
      path: '/employees'
      fullPath: '/employees'
      preLoaderRoute: typeof EmployeesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/employees/': {
      id: '/employees/'
      path: '/'
      fullPath: '/employees/'
      preLoaderRoute: typeof EmployeesIndexRouteImport
      parentRoute: typeof EmployeesRoute
    }
    '/employees/$id': {
      id: '/employees/$id'
      path: '/$id'
      fullPath: '/employees/$id'
      preLoaderRoute: typeof EmployeesIdRouteImport
      parentRoute: typeof EmployeesRoute
    }
    '/dashboard/waiting-on': {
      id: '/dashboard/waiting-on'
      path: '/waiting-on'
      fullPath: '/dashboard/waiting-on'
      preLoaderRoute: typeof DashboardWaitingOnRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/projects': {
      id: '/dashboard/projects'
      path: '/projects'
      fullPath: '/dashboard/projects'
      preLoaderRoute: typeof DashboardProjectsRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/dashboard/overview': {
      id: '/dashboard/overview'
      path: '/overview'
      fullPath: '/dashboard/overview'
      preLoaderRoute: typeof DashboardOverviewRouteImport
      parentRoute: typeof DashboardRoute
    }
    '/employees/$id/': {
      id: '/employees/$id/'
      path: '/'
      fullPath: '/employees/$id/'
      preLoaderRoute: typeof EmployeesIdIndexRouteImport
      parentRoute: typeof EmployeesIdRoute
    }
    '/employees/$id/time-off': {
      id: '/employees/$id/time-off'
      path: '/time-off'
      fullPath: '/employees/$id/time-off'
      preLoaderRoute: typeof EmployeesIdTimeOffRouteImport
      parentRoute: typeof EmployeesIdRoute
    }
    '/employees/$id/schedule': {
      id: '/employees/$id/schedule'
      path: '/schedule'
      fullPath: '/employees/$id/schedule'
      preLoaderRoute: typeof EmployeesIdScheduleRouteImport
      parentRoute: typeof EmployeesIdRoute
    }
  }
}

interface DashboardRouteChildren {
  DashboardOverviewRoute: typeof DashboardOverviewRoute
  DashboardProjectsRoute: typeof DashboardProjectsRoute
  DashboardWaitingOnRoute: typeof DashboardWaitingOnRoute
}

const DashboardRouteChildren: DashboardRouteChildren = {
  DashboardOverviewRoute: DashboardOverviewRoute,
  DashboardProjectsRoute: DashboardProjectsRoute,
  DashboardWaitingOnRoute: DashboardWaitingOnRoute,
}

const DashboardRouteWithChildren = DashboardRoute._addFileChildren(
  DashboardRouteChildren,
)

interface EmployeesIdRouteChildren {
  EmployeesIdScheduleRoute: typeof EmployeesIdScheduleRoute
  EmployeesIdTimeOffRoute: typeof EmployeesIdTimeOffRoute
  EmployeesIdIndexRoute: typeof EmployeesIdIndexRoute
}

const EmployeesIdRouteChildren: EmployeesIdRouteChildren = {
  EmployeesIdScheduleRoute: EmployeesIdScheduleRoute,
  EmployeesIdTimeOffRoute: EmployeesIdTimeOffRoute,
  EmployeesIdIndexRoute: EmployeesIdIndexRoute,
}

const EmployeesIdRouteWithChildren = EmployeesIdRoute._addFileChildren(
  EmployeesIdRouteChildren,
)

interface EmployeesRouteChildren {
  EmployeesIdRoute: typeof EmployeesIdRouteWithChildren
  EmployeesIndexRoute: typeof EmployeesIndexRoute
}

const EmployeesRouteChildren: EmployeesRouteChildren = {
  EmployeesIdRoute: EmployeesIdRouteWithChildren,
  EmployeesIndexRoute: EmployeesIndexRoute,
}

const EmployeesRouteWithChildren = EmployeesRoute._addFileChildren(
  EmployeesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRouteWithChildren,
  EmployeesRoute: EmployeesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
